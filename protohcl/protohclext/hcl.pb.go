// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: hcl.proto

package protohclext

import (
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Attribute_RawMode int32

const (
	Attribute_NOT_RAW Attribute_RawMode = 0
	// MessagePack is the most expressive wire encoding for HCL values,
	// because it's able to preserve unknown values using a MessagePack
	// extension type.
	Attribute_MESSAGEPACK Attribute_RawMode = 1
	// JSON can encode all _known_ HCL values, but cannot encode unknown
	// values.
	Attribute_JSON Attribute_RawMode = 2
)

// Enum value maps for Attribute_RawMode.
var (
	Attribute_RawMode_name = map[int32]string{
		0: "NOT_RAW",
		1: "MESSAGEPACK",
		2: "JSON",
	}
	Attribute_RawMode_value = map[string]int32{
		"NOT_RAW":     0,
		"MESSAGEPACK": 1,
		"JSON":        2,
	}
)

func (x Attribute_RawMode) Enum() *Attribute_RawMode {
	p := new(Attribute_RawMode)
	*p = x
	return p
}

func (x Attribute_RawMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Attribute_RawMode) Descriptor() protoreflect.EnumDescriptor {
	return file_hcl_proto_enumTypes[0].Descriptor()
}

func (Attribute_RawMode) Type() protoreflect.EnumType {
	return &file_hcl_proto_enumTypes[0]
}

func (x Attribute_RawMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Attribute_RawMode.Descriptor instead.
func (Attribute_RawMode) EnumDescriptor() ([]byte, []int) {
	return file_hcl_proto_rawDescGZIP(), []int{0, 0}
}

type NestedBlock_CollectionKind int32

const (
	// AUTO allows protohcl to select a mode automatically.
	//
	// This is the only valid mode for non-repeated fields, and just passes
	// through the inner message directly as an object value.
	//
	// For "repeated" fields, AUTO is the same as SEQ.
	NestedBlock_AUTO NestedBlock_CollectionKind = 0
	// SEQ selects sequence mode, which produces either a list- or tuple-typed
	// value depending on whether the nested message type calls for "any"
	// type constraints which might therefore cause each element to have its
	// own distinct type.
	NestedBlock_SEQ NestedBlock_CollectionKind = 1
	// SET selects set mode, which requires an exact element type, and so it is
	// valid only for nested blocks that have no "any" type constraints within.
	NestedBlock_SET NestedBlock_CollectionKind = 2
)

// Enum value maps for NestedBlock_CollectionKind.
var (
	NestedBlock_CollectionKind_name = map[int32]string{
		0: "AUTO",
		1: "SEQ",
		2: "SET",
	}
	NestedBlock_CollectionKind_value = map[string]int32{
		"AUTO": 0,
		"SEQ":  1,
		"SET":  2,
	}
)

func (x NestedBlock_CollectionKind) Enum() *NestedBlock_CollectionKind {
	p := new(NestedBlock_CollectionKind)
	*p = x
	return p
}

func (x NestedBlock_CollectionKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NestedBlock_CollectionKind) Descriptor() protoreflect.EnumDescriptor {
	return file_hcl_proto_enumTypes[1].Descriptor()
}

func (NestedBlock_CollectionKind) Type() protoreflect.EnumType {
	return &file_hcl_proto_enumTypes[1]
}

func (x NestedBlock_CollectionKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NestedBlock_CollectionKind.Descriptor instead.
func (NestedBlock_CollectionKind) EnumDescriptor() ([]byte, []int) {
	return file_hcl_proto_rawDescGZIP(), []int{1, 0}
}

// Specifies that a particular field should recieve the value of an HCL
// attribute.
type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the attribute name expected for this attribute in the input
	// configuration. This must be set to declare that a field represents an
	// HCL attribute, and that the other fields here are relevant; otherwise,
	// the other fields will be entirely ignored.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Mark a field as required if you want the HCL decoder to reject bodies
	// that don't include the attribute at all.
	Required bool `protobuf:"varint,2,opt,name=required,proto3" json:"required,omitempty"`
	// An optional HCL-oriented type constraint, represented in HCL's type
	// expression syntax. By default protohcl chooses an HCL type constraint
	// automatically based on the field type, but because the HCL and protobuf
	// type systems are not totally congruent it may sometimes be necessary to
	// request different behavior.
	//
	// Not all combinations of proto field type and HCL field type are valid:
	// - Any of the primitive types may encode into a proto string field,
	//   using the usual primitive-to-string conversion rules. This can be
	//   particularly useful for preserving high-precision numbers.
	// - A list or set type may encode into a "repeated" of a proto type
	//   compatible with the collection's element type.
	// - A map type may encode into a map of a proto type compatible with the
	//   collection's element type.
	// - An object type may encode into a message type whose fields also have
	//   HCL annotations, as long as all of the fields decode as attributes.
	//   Decoding as nested block is not valid inside an attribute, because
	//   only nested blocks can contain other nested blocks.
	// - Any type constraint at all is valid if the proto field type is "bytes"
	//   AND if you also populate field "raw" with raw value encoding settings.
	//   You can choose a dynamic type constraint if you need protohcl to also
	//   encode dynamic type information into the raw field.
	// - There is currently no supported encoding for tuple types except for
	//   the raw mode, because there is no direct analog in protobuf and
	//   tuple types are rarely used directly as attribute type constraints
	//   anyway. If you need one, use raw mode.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// For "bytes" fields only, protohcl can preserve the resulting HCL value
	// by encoding as an inner encoding format, which therefore allows
	// the other party to decode and recover the original HCL value without
	// losing type information. This must always be unset for other field types.
	// Any field with "raw" set MUST also set "type".
	Raw Attribute_RawMode `protobuf:"varint,4,opt,name=raw,proto3,enum=hcl.Attribute_RawMode" json:"raw,omitempty"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_hcl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_hcl_proto_rawDescGZIP(), []int{0}
}

func (x *Attribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Attribute) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *Attribute) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Attribute) GetRaw() Attribute_RawMode {
	if x != nil {
		return x.Raw
	}
	return Attribute_NOT_RAW
}

// Specifies that a particular field should recieve content from a nested
// HCL block. This decoding mode is only supported for message-typed fields.
// Mark the field as "repeated" to accept multiple nested blocks of the same
// type, preserving the source declaration order.
type NestedBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the block type name expected for blocks of this type in the input
	// configuration. This must be set to declare that a field represents an
	// HCL nested block.
	TypeName string `protobuf:"bytes,1,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// For repeated fields representing nested block types, use set kind to
	// control what kind of collection ObjectValueForMessage will use to
	// contain the multiple objects representing multiple nested blocks.
	Kind NestedBlock_CollectionKind `protobuf:"varint,2,opt,name=kind,proto3,enum=hcl.NestedBlock_CollectionKind" json:"kind,omitempty"`
}

func (x *NestedBlock) Reset() {
	*x = NestedBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedBlock) ProtoMessage() {}

func (x *NestedBlock) ProtoReflect() protoreflect.Message {
	mi := &file_hcl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedBlock.ProtoReflect.Descriptor instead.
func (*NestedBlock) Descriptor() ([]byte, []int) {
	return file_hcl_proto_rawDescGZIP(), []int{1}
}

func (x *NestedBlock) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *NestedBlock) GetKind() NestedBlock_CollectionKind {
	if x != nil {
		return x.Kind
	}
	return NestedBlock_AUTO
}

// Specifies that a particular field should recieve content from a label
// of the block being decoded. This makes sense only for message types
// that are representing nested blocks.
// The number of BlockLabel fields in a message defines now many labels
// are required for the corresponding block type. The name assigned to
// each label is used only for error messages when the configuration author
// does not write the correct number of labels.
type BlockLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the name of this label to be used in error messages. This must be
	// set to declare that a field represents an HCL nested block.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *BlockLabel) Reset() {
	*x = BlockLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hcl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockLabel) ProtoMessage() {}

func (x *BlockLabel) ProtoReflect() protoreflect.Message {
	mi := &file_hcl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockLabel.ProtoReflect.Descriptor instead.
func (*BlockLabel) Descriptor() ([]byte, []int) {
	return file_hcl_proto_rawDescGZIP(), []int{2}
}

func (x *BlockLabel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var file_hcl_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptor.FieldOptions)(nil),
		ExtensionType: (*Attribute)(nil),
		Field:         50000,
		Name:          "hcl.attr",
		Tag:           "bytes,50000,opt,name=attr",
		Filename:      "hcl.proto",
	},
	{
		ExtendedType:  (*descriptor.FieldOptions)(nil),
		ExtensionType: (*NestedBlock)(nil),
		Field:         50001,
		Name:          "hcl.block",
		Tag:           "bytes,50001,opt,name=block",
		Filename:      "hcl.proto",
	},
	{
		ExtendedType:  (*descriptor.FieldOptions)(nil),
		ExtensionType: (*BlockLabel)(nil),
		Field:         50002,
		Name:          "hcl.label",
		Tag:           "bytes,50002,opt,name=label",
		Filename:      "hcl.proto",
	},
	{
		ExtendedType:  (*descriptor.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50004,
		Name:          "hcl.flatten",
		Tag:           "varint,50004,opt,name=flatten",
		Filename:      "hcl.proto",
	},
}

// Extension fields to descriptor.FieldOptions.
var (
	// optional hcl.Attribute attr = 50000;
	E_Attr = &file_hcl_proto_extTypes[0]
	// optional hcl.NestedBlock block = 50001;
	E_Block = &file_hcl_proto_extTypes[1]
	// optional hcl.BlockLabel label = 50002;
	E_Label = &file_hcl_proto_extTypes[2]
	// optional bool flatten = 50004;
	E_Flatten = &file_hcl_proto_extTypes[3]
)

var File_hcl_proto protoreflect.FileDescriptor

var file_hcl_proto_rawDesc = []byte{
	0x0a, 0x09, 0x68, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x68, 0x63, 0x6c,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xac, 0x01, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x68, 0x63, 0x6c, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2e, 0x52, 0x61, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x72, 0x61, 0x77, 0x22, 0x31,
	0x0a, 0x07, 0x52, 0x61, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x54,
	0x5f, 0x52, 0x41, 0x57, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10,
	0x02, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x68,
	0x63, 0x6c, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x22, 0x2c, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x53, 0x45, 0x51, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x45, 0x54, 0x10,
	0x02, 0x22, 0x20, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x3a, 0x43, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x12, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x63, 0x6c, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x3a, 0x47, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xd1, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x63, 0x6c, 0x2e, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x3a, 0x46, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd2, 0x86, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x63, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x39, 0x0a, 0x07, 0x66, 0x6c, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xd4, 0x86, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x6c, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x6d, 0x61, 0x72,
	0x74, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x68, 0x63, 0x6c, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x68, 0x63, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x68, 0x63, 0x6c, 0x65,
	0x78, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hcl_proto_rawDescOnce sync.Once
	file_hcl_proto_rawDescData = file_hcl_proto_rawDesc
)

func file_hcl_proto_rawDescGZIP() []byte {
	file_hcl_proto_rawDescOnce.Do(func() {
		file_hcl_proto_rawDescData = protoimpl.X.CompressGZIP(file_hcl_proto_rawDescData)
	})
	return file_hcl_proto_rawDescData
}

var file_hcl_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_hcl_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_hcl_proto_goTypes = []interface{}{
	(Attribute_RawMode)(0),          // 0: hcl.Attribute.RawMode
	(NestedBlock_CollectionKind)(0), // 1: hcl.NestedBlock.CollectionKind
	(*Attribute)(nil),               // 2: hcl.Attribute
	(*NestedBlock)(nil),             // 3: hcl.NestedBlock
	(*BlockLabel)(nil),              // 4: hcl.BlockLabel
	(*descriptor.FieldOptions)(nil), // 5: google.protobuf.FieldOptions
}
var file_hcl_proto_depIdxs = []int32{
	0, // 0: hcl.Attribute.raw:type_name -> hcl.Attribute.RawMode
	1, // 1: hcl.NestedBlock.kind:type_name -> hcl.NestedBlock.CollectionKind
	5, // 2: hcl.attr:extendee -> google.protobuf.FieldOptions
	5, // 3: hcl.block:extendee -> google.protobuf.FieldOptions
	5, // 4: hcl.label:extendee -> google.protobuf.FieldOptions
	5, // 5: hcl.flatten:extendee -> google.protobuf.FieldOptions
	2, // 6: hcl.attr:type_name -> hcl.Attribute
	3, // 7: hcl.block:type_name -> hcl.NestedBlock
	4, // 8: hcl.label:type_name -> hcl.BlockLabel
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	6, // [6:9] is the sub-list for extension type_name
	2, // [2:6] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_hcl_proto_init() }
func file_hcl_proto_init() {
	if File_hcl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hcl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hcl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hcl_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 4,
			NumServices:   0,
		},
		GoTypes:           file_hcl_proto_goTypes,
		DependencyIndexes: file_hcl_proto_depIdxs,
		EnumInfos:         file_hcl_proto_enumTypes,
		MessageInfos:      file_hcl_proto_msgTypes,
		ExtensionInfos:    file_hcl_proto_extTypes,
	}.Build()
	File_hcl_proto = out.File
	file_hcl_proto_rawDesc = nil
	file_hcl_proto_goTypes = nil
	file_hcl_proto_depIdxs = nil
}
