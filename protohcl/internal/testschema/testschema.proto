syntax = "proto3";

package hcl.testschema;

option go_package = "github.com/apparentlymart/go-protohcl/protohcl/internal/testschema";

import "hcl.proto";

message Root {
  // Name represents an HCL attribute
  string name = 1 [ (hcl.attr).name = "name", (hcl.attr).required = true ];

  // Thing represents nested blocks of type "thing"
  repeated Thing things = 2 [ (hcl.block).type_name = "thing" ];

  MoreRoot more = 3 [ (hcl.flatten) = true ];
}

message Thing {
  // The first label on a nested "thing" block
  string name = 1 [ (hcl.label).name = "name" ];
}

message MoreRoot {
  // An additional attribute to be "flattened" into root.
  int64 count = 1 [ (hcl.attr).name = "count" ];

  // We can re-use the same Thing message type for another block type that
  // has a different name from HCL's perspective.
  Thing other_thing = 2 [ (hcl.block).type_name = "other_thing" ];
}

message WithStringAttr {
  // Name represents an HCL attribute
  string name = 1 [ (hcl.attr).name = "name", (hcl.attr).type = "string" ];
}

message WithRawDynamicAttr {
  // Name represents an HCL attribute
  bytes raw = 1 [
    (hcl.attr).name = "raw",
    (hcl.attr).type = "any",
    (hcl.attr).raw = JSON
  ];
}

message WithNumberAttrAsInt32 {
  // Here the protobuf type has a narrower range than the HCL type, so
  // protohcl must apply additional validation rules.
  int32 num = 1 [ (hcl.attr).name = "num", (hcl.attr).type = "number" ];
}

message WithNumberAttrAsString {
  // This is an example of the HCL type disagreeing with the proto type in
  // a valid way, because it can be resolved by an extra round of type
  // conversion.
  string num = 1 [ (hcl.attr).name = "num", (hcl.attr).type = "number" ];
}

message WithFlattenStringAttr {
  WithStringAttr base = 1 [ (hcl.flatten) = true ];
  string species = 2
      [ (hcl.attr).name = "species", (hcl.attr).type = "string" ];
}

message WithNestedFlattenStringAttr {
  WithFlattenStringAttr base = 1 [ (hcl.flatten) = true ];
  string breed = 3 [ (hcl.attr).name = "breed", (hcl.attr).type = "string" ];
}

message WithNestedBlockNoLabelsSingleton {
  // A nested block type no labels
  WithStringAttr doodad = 1 [ (hcl.block).type_name = "doodad" ];
}

message WithNestedBlockOneLabelSingleton {
  // A nested block type with one label
  WithOneBlockLabel doodad = 1 [ (hcl.block).type_name = "doodad" ];
}

message WithNestedBlockTwoLabelSingleton {
  // A nested block type with one label
  WithTwoBlockLabels doodad = 1 [ (hcl.block).type_name = "doodad" ];
}

message WithNestedBlockNoLabelsRepeated {
  // A nested block type no labels
  repeated WithStringAttr doodad = 1 [ (hcl.block).type_name = "doodad" ];
}

message WithNestedBlockOneLabelRepeated {
  // A nested block type with one label
  repeated WithOneBlockLabel doodad = 1 [ (hcl.block).type_name = "doodad" ];
}

message WithNestedBlockTwoLabelRepeated {
  // A nested block type with one label
  repeated WithTwoBlockLabels doodad = 1 [ (hcl.block).type_name = "doodad" ];
}

message WithOneBlockLabel {
  // Single "name" label
  string name = 1 [ (hcl.label).name = "name" ];

  // Another field in case we also want to test attribute decoding
  string nickname = 2
      [ (hcl.attr).name = "nickname", (hcl.attr).type = "string" ];
}

message WithTwoBlockLabels {
  string type = 1 [ (hcl.label).name = "type" ];
  string name = 2 [ (hcl.label).name = "name" ];

  // Another field in case we also want to test attribute decoding
  string nickname = 3
      [ (hcl.attr).name = "nickname", (hcl.attr).type = "string" ];
}
